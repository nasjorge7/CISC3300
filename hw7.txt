CISC 3300 S25 
Homework 7 
1. What is a class? What is an object? What is OOP? 
A class is a template for creating objects. An object is an instance of a class and OOP allows for better organization, modularity, and reusability of code.

2. Why use an abstract class in OOP? 

Abstract classes allow the parent to create defaults for methods

3. What are superglobals in PHP, what are some examples of data they provide? 

Superglobals are several predefined variables which means they are available in all scopes throughout a script.An example of data they provide is via an HTTP POST request in which we can use parse_str(file_get_contents('php://input'), $_PUT); Also another common example is the $_SERVER superglobal in which we can use a code such as <?php
echo "User IP Address: " . $_SERVER['REMOTE_ADDR'];
?>



4. What are the two steps to setting up and using a class via namespaces? 

Step 1 is to define a namespace it in the class to be used. step 2 is that In the place we want to use the class we have two options either typing out the full namespace everytime we want to use that class or import the class into the current namespace with use keyword

5. What is MVC? Detail the different parts. 

MVC is a architectural/design pattern that separates an application into three main logical components Model, View, and Controller. MVC (Model-View-Controller) is a software architecture that separates an application into three components: Model (handles data and business logic), View (manages the user interface), and Controller (processes user requests and connects the Model and View). The Controller receives user input, requests data from the Model, and sends the processed data to the View for display. This separation improves maintainability, scalability, and reusability in software development.


6. If I had a resource called users in my application that was designed with RESTFUL URI design, what would the URI and HTTP verbs be for: 
a. getting all users(HTTP Verb: GET and URI : /users )
b. getting one users(HTTP Verb: GET and URI:/users/{id})
c. saving a user (HTTP Verb: POST and URI:/users)
d. editing a user (HTTP Verb: PUT/PATCH and URI:/users/{id})
e. deleting a user (HTTP Verb: DELETE and URI:?users/{id})
7. Create a PHP project in an MVC style. It should have the ability to submit a new note resource, a note should have a title and a description. The title of the note should be more than 3 characters long and the description should be more than 10 characters long. Any special characters should be converted to HTML entities. On the frontend show a success message if the request is successful and an error message if anything is wrong. Add some basic styling. 
a. no need for a model class, the validation can happen in a controller method.
